from z3 import *

# Define dimensions of matrices
n = 3  # number of rows
m = 3  # number of columns

# Create Z3 variables for matrices
v5 = [[BitVec(f'v5_{i}_{j}', 8) for j in range(m)] for i in range(n)]
v6 = [[BitVec(f'v6_{i}_{j}', 8) for j in range(m)] for i in range(n)]
v7 = [[BitVec(f'v7_{i}_{j}', 8) for j in range(m)] for i in range(n)]

first_check = [13668, 14210, 13717, 25856, 27014, 25960, 24550, 26203, 25108]
second_check = [26100, 27358, 20693, 27809, 29112, 22469, 13080, 13624, 10578]
third_check = [16360, 20647, 21561, 17268, 21580, 22434, 8380, 10294, 10774]
fourth_check = [13622, 14127, 13663, 13256, 13880, 13313, 21424, 22444, 21212]
fifth_check = [13860, 14499, 10940, 13553, 14186, 10906, 24054, 25552, 18586]
sixth_check = [8822, 11049, 11567, 16556, 20720, 21610, 14527, 16527, 17090]

# Create Z3 solver instance
solver = Solver()

# Define constraints for matrix multiplication
for i in range(n):
    for j in range(m):
        solver.add(first_check[i*3 + j] == Sum([v5[i][k] * v6[k][j] for k in range(m)]))
        solver.add(second_check[i*3 + j] == Sum([v6[i][k] * v5[k][j] for k in range(m)]))
        solver.add(third_check[i*3+j]  == Sum([v6[i][k] * v7[k][j] for k in range(m)]))
        solver.add(fourth_check[i*3+j] == Sum([v7[i][k] * v6[k][j] for k in range(m)]))
        solver.add(fifth_check[i*3+j] == Sum([v7[i][k] * v5[k][j] for k in range(m)]))
        solver.add(sixth_check[i*3+j] == Sum([v5[i][k] * v7[k][j] for k in range(m)]))

# solver.add(v5[0][0] == ord('c'))
# solver.add(v5[0][1] == ord('c'))
# solver.add(v5[0][2] == ord('i'))
# solver.add(v5[1][0] == ord('t'))
# solver.add(v5[1][1] == ord('{'))
# solver.add(v7[2][2] == ord('}'))

for i in range(n):
    for j in range(m):
        solver.add(UGE(v5[i][j], 48))  # Ensuring values are greater than or equal to 48
        solver.add(ULT(v5[i][j], 126))  # Ensuring values are less than 126
        solver.add(UGE(v6[i][j], 48))  # Ensuring values are greater than or equal to 48
        solver.add(ULT(v6[i][j], 126))  # Ensuring values are less than 126
        solver.add(UGE(v7[i][j], 48))  # Ensuring values are greater than or equal to 48
        solver.add(ULT(v7[i][j], 126))  # Ensuring values are less than 126

if solver.check() == sat:
    model = solver.model()
    print("Solution found:")
    print("ccit{",end="")
    for i in range(n):
        for j in range(m):
            a = model[v5[i][j]].as_long()
            print(chr(a), end="")
    print("-",end="")
    for i in range(n):
        for j in range(m):
            a = model[v6[i][j]].as_long()
            print(chr(a), end="")
    print("-", end="")
    for i in range(n):
        for j in range(m):
            a = model[v7[i][j]].as_long()
            print(chr(a), end="")
    print("}")
print("Solution status:", solver.check())
