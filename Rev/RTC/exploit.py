from pwn import *
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA
from Crypto.Util.number import long_to_bytes, bytes_to_long
import string
import math
import numpy as np
from scipy.linalg import sqrtm
from gmpy2 import iroot

input = [0] * 29
input[9] = 45
input[19] = 4
''' presunto inverso di first
-14347280620544/5444846550095047	2472354353941503/696940358412166000	-1659438/744725981
-5544511321774079/348470179206083000	6011608842643455/696940358412166000	-168245/744725981
14284865/744725981	-9287104/744725981	1827802/744725981
'''
first_check = [13667, 14210, 13717, 25855, 27014, 25960, 24550, 26203, 25108]
second_check = [16360, 20647, 21561, 17268, 21580, 22434, 8380, 10294, 10774]
third_check = [13860, 14499, 10940, 13553, 14186, 10906, 24054, 25552, 18586]
fourth_check = [13622, 14127, 13663, 13256, 13880, 13313, 21424, 22444, 21212]
fifth_check = [13860, 14499, 10940, 13553, 14186, 10906, 24054, 25552, 18586]
sixth_check = [8822, 11049, 11567, 16556, 20720, 21610, 14527, 16527, 17090]

matrix_1 = np.array([[0]*3]*3)
for i in range(0,3):
    for j in range(0,3):
        matrix_1[i][j] = first_check[i*3 + j]
print(matrix_1)

matrix_2 = np.array([[0]*3]*3)
for i in range(0,3):
    for j in range(0,3):
        matrix_2[i][j] = second_check[i*3 + j]
print(matrix_2)
matrix_3 = np.array([[0]*3]*3)

for i in range(0,3):
    for j in range(0,3):
        matrix_3[i][j] = third_check[i*3 + j]
print(matrix_3)

matrix_4 = np.array([[0]*3]*3)
for i in range(0,3):
    for j in range(0,3):
        matrix_4[i][j] = fourth_check[i*3 + j]
print(matrix_4)

matrix_5 = np.array([[0]*3]*3)
for i in range(0,3):
    for j in range(0,3):
        matrix_5[i][j] = fifth_check[i*3 + j]
print(matrix_5)

matrix_6 = np.array([[0]*3]*3)
for i in range(0,3):
    for j in range(0,3):
        matrix_6[i][j] = sixth_check[i*3 + j]
print(matrix_6)

# print(np.linalg.inv(matrix_5))

v6 = sqrtm(np.matmul(matrix_4,np.matmul(np.linalg.inv(matrix_1), matrix_6)).real)
print(v6.real)
v6 = v6.real
v5 = np.matmul(np.linalg.inv(v6), matrix_2)
print(v5)
a = [0]*9
a[0] = -iroot(8835,2)
a[1] = -12*iroot(77)
a[2] = -iroot(11627)
a[3]= -2*iroot(2114)
a[4] = 15*iroot(47)
a[5] = 11*iroot(91)
a[6] = 4*iroot(883)
a[7] = 2*iroot(4711)
a[8] = 4*iroot(1217)
for i in range(9):
    print(chr(int(round(a[i]))), end="")

