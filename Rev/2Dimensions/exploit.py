from pwn import *
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA
from Crypto.Util.number import long_to_bytes, bytes_to_long
import string
import math
import numpy as np

ans = [0]*80

checkycheck_pre = [  65269,
  57536,
  56325,
  61096,
  92191,
  92686,
  90453,
  85444,
  133063,
  106367,
  138521,
  131143,
  131996,
  128025,
  109172,
  133243,
  151970,
  141133,
  127649,
  146360,
  142569,
  132407,
  136420,
  126395,
  101726,
  92762,
  80393,
  102650,
  112678,
  102661,
  93252,
  109302,
  119063,
  103914,
  116173,
  115656,
  139951,
  121070,
  136303,
  134476]
matrix_pre= [10,
  126,
  19,
  62,
  80,
  112,
  94,
  111,
  30,
  65,
  203,
  104,
  56,
  146,
  157,
  38,
  81,
  100,
  94,
  54,
  158,
  10,
  51,
  9,
  127,
  247,
  243,
  223,
  245,
  173,
  251,
  238,
  232,
  79,
  221,
  120,
  150,
  34,
  22,
  49,
  15,
  199,
  140,
  201,
  225,
  211,
  175,
  219,
  35,
  251,
  219,
  142,
  52,
  221,
  197,
  205,
  94,
  172,
  235,
  41,
  140,
  179,
  217,
  55,
  11,
  89,
  177,
  96,
  49,
  30,
  146,
  224,
  134,
  63,
  71,
  160,
  108,
  154,
  74,
  50,
  118,
  144,
  44,
  8,
  210,
  143,
  103,
  173,
  162,
  219,
  117,
  173,
  117,
  8,
  205,
  162,
  195,
  181,
  228,
  157,
  0,
  0,
  0,
  0]

matrix = np.array([[0]*10]*10)
checkycheck = np.array([[0]*4]*10)
for i in range(10):
    for j in range(10):
        matrix[i][j] = matrix_pre[10*i + j]

for i in range(10):
    for j in range(4):
        checkycheck[i][j] = checkycheck_pre[4*i + j]
print(matrix)
print(checkycheck)
print("inverto la matrice")
matrix_inv = np.linalg.inv(matrix)
solve = np.matmul(matrix_inv, checkycheck)
print(solve)
# print(int(solve))
for i in range(10):
    for j in range(4):
        print(chr(int(round(solve[i][j]))), end="")