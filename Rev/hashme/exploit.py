from pwn import *
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA
from Crypto.Util.number import long_to_bytes, bytes_to_long
import string
import math
import hashlib

# prima di tutto
# context.terminal=["tmux", "splitw", "-h"]

FLAG = [104, 251, 155, 244, 229, 208, 142,  37,   1, 191, 
  132, 142, 164,   3,  44, 103, 236, 200, 190,  82, 
  134, 226, 235, 235,  67,  91, 212, 126, 198,  78, 
   24, 195,  89, 225, 181, 200, 202, 214]
flag = [0]*38
# print(v5)
# v5 = 0xa4cf614c1e7c9fc2b685fede05fa2333532d0e47ab022b765444a563a6249f20fb0
v5 = [0x1e, 0x7c, 0x9f, 0xc2, 0xa4, 0xcf, 0x61, 0x4c,
0x05, 0xfa, 0x23, 0x33, 0xb6, 0x85, 0xfe, 0xde,
0xab, 0x02, 0x2b, 0x76, 0x53, 0x2d, 0x0e, 0x47,
0xa6, 0x24, 0x9f, 0x20, 0x54, 0x44, 0xa5, 0x63]

# v5 = [0xc2, 0x9f, 0x7c, 0x1e, 0x4c, 0x61, 0xcf, 0xa4,
# 0x33, 0x23, 0xfa, 0x05, 0xde, 0xfe, 0x85, 0xb6,
# 0x76, 0x2b, 0x02, 0xab, 0x47, 0x0e, 0x2d, 0x53,
# 0x20, 0x9f, 0x24, 0xa6, 0x63, 0xa5, 0x44, 0x54]

# v5 = [0xc5, 0x82, 0xef, 0x95, 0x8b, 0x94, 0xe3, 0xa0, 
# 0xb0, 0xec, 0x38, 0x87, 0x6c, 0x88, 0x1a, 0x73,
# 0x9d, 0x32, 0x29, 0x5c, 0xd1, 0x70, 0xd6, 0x9b,
# 0xa3, 0x02, 0x3d, 0x12, 0x87, 0x1f, 0xc6, 0x3f]

print(len (v5)) 
# v5[0] = FLAG[0] ^ ord('c')
# v5[1] = FLAG[1] - ord('c')
# v5[2] = FLAG[2] ^ ord('i')
# v5[3] = FLAG[3] - ord('t')
# v5[4] = FLAG[4] ^ ord('{')
# v5[37] = FLAG[5] - ord('}')
print('v5:', v5 )


data =[0xf3,0x0f,0x1e,0xfa,0x55,0x48,0x89,0xe5, 
0x48,0x81,0xec,0xd0,0x00,0x00,0x00,0x48, 
0x89,0xbd,0x38,0xff,0xff,0xff,0x64,0x48, 
0x8b,0x04,0x25,0x28,0x00,0x00,0x00,0x48, 
0x89,0x45,0xf8,0x31,0xc0,0x48,0x8d,0x05, 
0xd4,0xff,0xff,0xff,0x48,0x89,0x85,0x50, 
0xff,0xff,0xff,0x48,0x8d,0x05,0xbc,0x01, 
0x00,0x00,0x48,0x89,0x85,0x58,0xff,0xff, 
0xff,0x48,0x8d,0x85,0x60,0xff,0xff,0xff, 
0x48,0x89,0xc7,0xe8,0xeb,0xfc,0xff,0xff, 
0x85,0xc0,0x75,0x0a,0xb8,0x00,0x00,0x00, 
0x00,0xe9,0x82,0x01,0x00,0x00,0x48,0x8b, 
0x85,0x58,0xff,0xff,0xff,0x48,0x2b,0x85, 
0x50,0xff,0xff,0xff,0x48,0x89,0xc2,0x48, 
0x8b,0x8d,0x50,0xff,0xff,0xff,0x48,0x8d, 
0x85,0x60,0xff,0xff,0xff,0x48,0x89,0xce, 
0x48,0x89,0xc7,0xe8,0xa3,0xfc,0xff,0xff, 
0x85,0xc0,0x75,0x0a,0xb8,0x00,0x00,0x00, 
0x00,0xe9,0x4a,0x01,0x00,0x00,0x48,0x8d, 
0x95,0x60,0xff,0xff,0xff,0x48,0x8d,0x45, 
0xd0,0x48,0x89,0xd6,0x48,0x89,0xc7,0xe8, 
0x3f,0xfc,0xff,0xff,0x85,0xc0,0x75,0x0a, 
0xb8,0x00,0x00,0x00,0x00,0xe9,0x26,0x01, 
0x00,0x00,0xc7,0x85,0x48,0xff,0xff,0xff, 
0x01,0x00,0x00,0x00,0xc7,0x85,0x4c,0xff, 
0xff,0xff,0x00,0x00,0x00,0x00,0xe9,0xf0, 
0x00,0x00,0x00,0xbf,0x80,0x96,0x98,0x00, 
0xe8,0x2e,0xfc,0xff,0xff,0x8b,0x85,0x4c, 
0xff,0xff,0xff,0x83,0xe0,0x01,0x85,0xc0, 
0x75,0x5c,0x8b,0x85,0x4c,0xff,0xff,0xff, 
0x48,0x63,0xd0,0x48,0x8b,0x85,0x38,0xff, 
0xff,0xff,0x48,0x01,0xd0,0x0f,0xb6,0x00, 
0x0f,0xbe,0xc8,0x8b,0x85,0x4c,0xff,0xff, 
0xff,0x99,0xc1,0xea,0x1b,0x01,0xd0,0x83, 
0xe0,0x1f,0x29,0xd0,0x48,0x98,0x0f,0xb6, 
0x44,0x05,0xd0,0x0f,0xb6,0xc0,0x31,0xc1, 
0x8b,0x85,0x4c,0xff,0xff,0xff,0x48,0x98, 
0x48,0x8d,0x15,0x6c,0x0a,0x00,0x00,0x0f, 
0xb6,0x04,0x10,0x0f,0xb6,0xc0,0x39,0xc1, 
0x74,0x69,0xc7,0x85,0x48,0xff,0xff,0xff, 
0x00,0x00,0x00,0x00,0xeb,0x5d,0x8b,0x85, 
0x4c,0xff,0xff,0xff,0x48,0x63,0xd0,0x48, 
0x8b,0x85,0x38,0xff,0xff,0xff,0x48,0x01, 
0xd0,0x0f,0xb6,0x00,0x0f,0xbe,0xc8,0x8b, 
0x85,0x4c,0xff,0xff,0xff,0x99,0xc1,0xea, 
0x1b,0x01,0xd0,0x83,0xe0,0x1f,0x29,0xd0, 
0x48,0x98,0x0f,0xb6,0x44,0x05,0xd0,0x0f, 
0xb6,0xc0,0x01,0xc8,0x0f,0xb6,0xd0,0x8b, 
0x85,0x4c,0xff,0xff,0xff,0x48,0x98,0x48, 
0x8d,0x0d,0x0d,0x0a,0x00,0x00,0x0f,0xb6, 
0x04,0x08,0x0f,0xb6,0xc0,0x39,0xc2,0x74, 
0x0a,0xc7,0x85,0x48,0xff,0xff,0xff,0x00, 
0x00,0x00,0x00,0xbf,0x2e,0x00,0x00,0x00, 
0xe8,0x0e,0xfb,0xff,0xff,0x48,0x8b,0x05, 
0xd7,0x29,0x00,0x00,0x48,0x89,0xc7,0xe8, 
0x8f,0xfb,0xff,0xff,0x83,0x85,0x4c,0xff, 
0xff,0xff,0x01,0x83,0xbd,0x4c,0xff,0xff, 
0xff,0x25,0x0f,0x8e,0x03,0xff,0xff,0xff, 
0xbf,0x0a,0x00,0x00,0x00,0xe8,0xe1,0xfa, 
0xff,0xff,0x8b,0x85,0x48,0xff,0xff,0xff, 
0x48,0x8b,0x75,0xf8,0x64,0x48,0x33,0x34, 
0x25,0x28,0x00,0x00,0x00,0x74,0x05,0xe8, 
0x27,0xfb,0xff,0xff,0xc9,0xc3]

data_bytes = bytes(data)
# print("printing data bytes", data_bytes)

hash_object = hashlib.sha256()
hash_object.update(data_bytes)
v5 = hash_object.digest()
for i in range(0, len(flag)):
    if (i & 1) != 0:
        flag[i] = (FLAG[i] - v5[i%32]) # dispari
    else:
        flag[i] = (FLAG[i] ^ v5[i%32]) # pari

print(flag)
for i in range(38):
    # print("len = ", len(flag))
    print(chr(flag[i]%256), end="")
print()
print(len(flag))
for i in range(0, 38):
    if (i & 1) != 0:
        if(flag[i] + v5[i%32] != FLAG[i]):
            print("Error")
    else:
        if(flag[i] ^ v5[i%32] != FLAG[i]):
            print("Error")