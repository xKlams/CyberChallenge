from pwn import *
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA
from Crypto.Util.number import long_to_bytes, bytes_to_long
from gmpy2 import iroot
from sympy import nextprime
import string
import math


n = 172377304098000319660577578870264313556184046287862673784665710599301882707008987665170327167971269594882804522636794084329107738576503499804739938774201863149816651988032901682795776484298122455426909736239035075910885000551650834627745175767427363984820671767616224680540521012750322639590176167881774139763
e = 65537
c = 35486106165705086474346333506622527669548905735797338377697554895463855971822503647324619168739428916939166538218320855355570537914921414057224099823535804636805493064199965765840561740159348620104735485493371746387015632609228386503797162027697048734368995057905713389380107712632833202762727071542030405516

p = nextprime(iroot(n, 2)[0])
q = n//p

phi = (p-1)*(q-1)

d = pow(e, -1, phi)
print(long_to_bytes(pow(c, d, n)))