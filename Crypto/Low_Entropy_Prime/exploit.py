from Crypto.Util.number import long_to_bytes
from sympy import nextprime
from gmpy2 import iroot

n = 384389998491152572574356285597324189427404009914529108330791643536916335797075958110906257599513112205187746790697159735960822069902656428776991835500084547015742941267288484484057117816497016934151730215049465623919261852150480995799483374718731249721404626936147040805685811521752303710747421551046200702696954005611842174532319195246449324827098013995764694649702612975030648492105611592442866757775457855507334717997879602459628094716754757071008569506789727
e = 65537
c = 112179884602540529265313549104489862169893498561679224274695886905490748248274989853169892563154770617594251432799746235893594525340803306927775585343041620232832054154947296222337296800455287612674545702635586931710645859939020378201020817342436807534066365077134991116140500239989570028315858771814253163088019309238429248842074262492113191314285023467572245571283032297689883005124640298791713995906596818540189565417726444526101343418545667715917456577399155

low = 0
up = iroot(n, 2)[0]
p = 1
q = 1
k =0
# while p * q != n:
#     print(p * q - n)
#     k = (low + up)//2
#     p = nextprime(pow(k, 4)+ 3*pow(k, 2) + 1)
#     q = nextprime(14*pow(k, 2))
#     if(p * q > n):
#         up = k
#     else:
#         low = k
# print(p)
# print(q)
p = 9101144902762675979923615681123755948332547661541432456386972182080922835137206893475096632733877513273693795023912400466549725240819680573334707258786227529564764671602936107779990683439267135530733999048521572059039360260073692149982152533894060105168211399826876445367661592114556452146513376467206095487
q = 42235345398628912977507564006769185699496705782579765445990105865651251672556120641502321660239562371579537712425072525315212972169744771906002485317343521

phi = (p-1) * (q-1)
d = pow(e, -1, phi)
print(long_to_bytes(pow(c, d, n)))